멀캠-융복합 프로젝트 클라우드 - 웹프로그래밍 1일 수업내용
( 2023/02/20 )


Topic


1. Network 이해


* Computer System - 프로그램 내장 방식
   * Hardware
      * CPU -  명령 수행( 연산/제어 )
      * Memory - 코드나 데이터 저장
      * I/O Device - 데이터 입/출력


      * Hardware 연결 관계
         * CPU - Memory - I/O Device
   * Software
      * System Software - Computer system 운영 목적 프로그램
         * O/S( Operating System ) - Windows, Linux, MacOS
            * Hardware 제어
         * Compiler/Interpreter - binary( 실행 가능 코드 ) 생성 
         * System Library - 함수/클래스 집합


      * Application Software - End-user( 사용자 )가 사용하는 프로그램


* Network
   * Communication( 통신 ) - 물리적으로 멀리 떨어져 있거나 다른 대상과 의견을 교환하는 방법
   * Computer 통신 - Computer 간의 데이터 교환, 데이터 공유
      * Program 
         * 데이터
         * 알고리즘( Algorithm )


   * Computer 통신을 위한 구성 요소
      * Computer 통신은 프로그램간의 통신을 의미


1. Computer 식별 - Hardware 식별
* IP Address - Network상의 Computer에 부여된 번호( 식별 번호 )
   * IPv4 - 32 bit, 10진수 4자리로 표현, 예) 192.168.0.1
   * IPv6 - 64 bit
* Port 번호 - Computer상에서 동작하는 프로그램 식별 번호
   * Process 식별 번호
   * Process는 프로그램을 의미
   * 16 bit - 65536개의 번호 사용
      * 0 ~ 1023 - 예약 번호
      * 1024 ~ 50000 - 범용 번호
      * 50000 ~ 65535 - 예비용


2. Computer 간 통신을 위한 약속
         * Protocol - Computer간 통신을 위한 약속
            * 국제적으로 표준화된 Protocol
               * HTTP - Web 통신
               * FTP - 파일 전송
               * SMTP - 메일 송신
               * POP2 - 메일 수신
               * Telnet - 명령 송수신
               * MQTT - IoT 기기 데이터 전송
            * 사용자 정의 Protocol - 사용자가 원하는 형태의 통신 방법을 정한 경우
         * Protocol  구성
            * Protocol Header - 해당 Protocol을 위한 공통 정보, 규약, 약속
            * Protocol Body - 실제 통신 데이터


________________


* Computer 통신을 위한 구조
   * Computer 통신을 위한 Computer 연결 구조
      * LAN( Local Area Network )
         * Computer Network 구조
         * 소규모 단위/좁은 지역에 있는 Computer간 연결
      * WAN( Wide Area Network )
         * 광대역 Network
         * LAN을 연결한 Network
      * Internet 
         * 전세계의 모든 Computer가 연결된 Network


* Computer 역할에 따른 분류
   * Client/Server 구조 - 대표적인 Computer Network 구조
   * Server Computer
      * 요청( Request )에 대한 응답( Response )을 수행하는 Computer
      * 항상 Client Computer 요청( Request )을 수신할 수 있도록 대기 상태를 유지
      * 무한 Loop 형태로 동작


   * Client Computer
      * Server Computer에게 원하는 요청( Request )을 전송하고 결과를 수신
   * P2P( Peer to Peer ) 구조
      * 상황에 따라 Server와 Client 역할을 바꾸어서 동작하는 구조
      * 중앙에 별도의 Server를 설정하지 않는 경우에 많이 활용
      * 대표적으로 BlockChain에서 활용


* Network 종류
   * 공인 Network - 인터넷에 연결된 Network
   * 사설 Network - 인터넷에 연결되지 않은 Network
________________


2. 웹 이해


* Internet
   * 전세계 Computer가 연결된 Network


* Web
   * World Wide Web( W3C ) - Internet에 연결되어 있는 Computer간의 자료 교환( 통신 )을 위한 공통의 Protocol을 사용
   * HTTP( Hyper Text Transfer Protocol ) 
      * Hyper Text( 문서간 연결, 연결 Link )를 사용하여 문서간 이동을 제공하는 Protocol
   * HTML( Hyper Text Markup Language )
      * Web page를 작성하기 위해 사용하는 스크립트( script )형 언어
      * 스트립트형 언어의 특징
         * 인터프리터 방식으로 binary 생성
         * 동적 자료형( Dynamic Typing )
         * 전반적으로 실행 속도가 늦다
   * World Wide Web Consortium (W3C) - Web 관리 단체


* Web 구성 요소
   * Web Server
      * HTTP 기반의 요청에 대한 응답 역할 수행
      * 응답을 항상 HTML 형식으로 제공
      * Web Server Program - Apache, NginX, IIS, Tomcat…


   * Web Client
      * HTTP 기반으로 요청하고 응답을 기다리는 역할 수행
      * 요청에 대한 응답 결과는 HTML
      * Web Client Program - Web browser( HTML을 해석해서 GUI 형태로 결과 출력 ), HTTP기반 요청 및 수신하는 프로그램( HTML 형식의 결과 )
         * www.example.com -> Domain, DNS( Domain Name Service ), Server에 부여된 이름
            * DNS Server - Domain name에 대한 IP Address를 제공하는 Server
         * www.example.com:80 -> 기본 형식에 맞게 부여
      * Server 주소 지정
         * < IP Address:Port 번호>
         * < Domain:Port 번호 >


   * 국제 표준 Protocol인 경우나 일반적으로 많이 사용하는 Server인 경우는 Port 번호를 미리 정해놓았다. -> port 번호를 생략하고 사용할 수 있다.
      * 80 port - HTTP
      * 443 port - HTTPs
      * 22 port - SSH
   * Web Server는 기본적으로 80 port/443 port를 기본 port로 사용
   * 하나의 port 번호에는 하나의 프로그램( 프로세스 )만 연결


   * 파이썬을 이용한 Web client 프로그램 작성
      * 파이썬 가상환경 구성
         * 가상 환경 - Software 적으로 파이썬 인터프리터 환경 구축
1. 가상 환경 생성 - python -m venv <가상환경 이름>
            * 가상 환경 구성은 해당 가상환경 사용 디렉토리에 생성하는것이 편리
2. 가상 환경 활성화 - <가상환경 이름>\Scripts\Activate.bat
예) webenv\Scripts\activate.bat
3. 가상 환경 비활성화 - <가상환경 이름>\Scripts\Deactivate.bat
예) webenv\Scripts\deactivate.bat


         * Windows에서는 CMD( command prompt )에서만 가능
      * 파이썬을 이용하여 Web Client 프로그램 작성


# webclient.py
#
# 파이썬을 이용한 web client 프로그램
#
import urllib.request   # HTTP를 이용한 요청용 패키지 Load


# 지정된 Web Server에 요청하여 결과를 print()로 출력
print( urllib.request.urlopen( "http://www.example.com" ).read().decode( 'utf-8' ) )


	

      * 실행 : python webclient.py




________________


3. 웹 프로그래밍 이해


* 웹 프로그램( Web program )
   * Web환경(  HTTP 사용 환경 )에서 동작하는 프로그램
   * Web Application 또는 WebApp 이라고 부른다.


* Front-End [ 웹 프로그램 ]
   * Web client에서만 동작하는 프로그램 - web browser
   * Web server와 상호작용없이 동작하는 프로그램
   * Front-end용 코드는 Web Server에 저장되어 있고 Web client의 요청이 있을 때마다 download된다.
   * Web Server로 부터 HTML을 download 한 후에 실행된다.
   * 정적 웹 application( static web application )
   * Front-End용 프로그램 언어 - Front-End 기술, 
      * HTML - Web page 구성
      * CSS - Web page 모양 설정
      * JavaScript - 사용자와 상호작용


* Back-End [ 웹 프로그램 ]
   * Web Server에서 동작하는 프로그램
   * Web client 요청에 대하여 Web server에서 동작하고 결과를 HTML 형식으로 응답
   * Web Server와 연결된 DataBase의 내용을 가공해서 Web Client에 결과 전송을 하는 경우 활용
   * 동적 웹 application( dynamic web application )
   * Back-End용 프로그램 언어
      * JSP( Java Server Program ) - Java  Servlet 기반 서버 스크립트
      * ASP( Active Server Program ) - .NET 기반 서버 스크립트
      * PHP - 독립적인 서버 스크립트
      * Node.js - JavaScript기반 서버 스크립트
      * Python - Python 기반 Back-end Framework
         * Flask
         * Django( 장고 )
      * 기타
* 풀 스택( full stack ) 프로그래머( 개발자 )
   * Front-End와 Back-End를 모두 프로그래밍하는 개발자


* Web Server는 Web Client가 요청할 때 기본 domain( IP Address )을 사용하면 index.html 파일을 기본 응답 파일로 사용한다.


* HTML - Web page 구성
   * Tag를 이용하여 Web page 구성 정보 표현
   * Tag는 시작 tag와 끝 tag로 구성되어 있고, 끝 tag는 /로 시작한다.
   * Tag는 < > 사이에 표현한다.
   * <!DOCTYPE html> -> 생략 가능, HTML version, HTML5 
   * <html></html> -> HTML 전체
   * <head></head> -> Web browser에 출력 되지 않는 내용
   * <body></body> -> Web browser에 출력 되는 내용
   * <meta> -> 부가 정보, charset=”utf-8”( -> Attribute ) 는 문자 인코딩( encoding )
   * <title> -> web browser의 제목 출력 내용
   * <link> -> 외부 파일 연결
   * <h1></h1> -> 제목
   * <hr> -> 수평선
   * <form> -> 사용자와 상호작용하기 위해 사용자 입력을 받기 위한 여러 구성 요소 표현
      * <input> : 사용자로 부터 입력 받거나 선택받기 위한 요소
      * <select> : 여러개중에 하나를 선택하기 위한 요소
   * <div> -> block 설정
   * <script></script> -> JavaScript code 추가
   * attribute중
      * class attribute -> 여러개의 tag를 묶는 용도로 사용
      * id attribute -> 하나의 tag만 지정하는 용도로 사용


* CSS - Web page 모양 설정
   * CSS 형식 -> selector { attribute: 값; … }


   * * -> 전체 선택자
   * h1 -> tag 선택자
   * .<class 이름> -> class 선택자
   * #<id 이름> -> id 선택자
   * CSS 선택자는 순차적으로 적용된다.


* JavaScript - 사용자와 상호작용
   * var -> 변수 선언
   * function -> 함수 정의
   * if -> 조건문
   * document -> DOM( Document Object Model ) object를 의미하고 Web browser의 DOM Tree에 대한 접근시 사용하는 object
      * Web browser 구성 요소 -> Web browser engine
         * HTML parser -> 결과가 DOM Tree
         * HTML render
         * JavaScript 실행 interpreter
 




________________


4. 파이썬 웹 표준 라이브러리 이해